service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-warmup
  


custom:
  warmup:                           # avoid cold start for all functions
    enable: true                    # Enable for all functions
    name: 'warm-up-function'        # name of the generated function
    payload:                        # Warmup invocation payload
      isWarmup: true 
    concurrency: 5                  # How many instances to keep running  

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos/{todoId}/todos
    iamRolesStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
  iamRolesStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GroupsDyanoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdat
            AttributeType: S            
        KeySchema: 
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdat
            KeyType: RANGE                    
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}        


HttpHandler:
  handler: src/lambda/http/create.handler
  events:
    - http:
        method: post
        path: todos
        request:
          # Schema that will be used to validate incoming requests
          schema:
            application/json: ${file(models/create-todo-model.json)}        