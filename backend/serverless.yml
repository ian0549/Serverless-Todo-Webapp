service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-warmup
  


custom:
  warmup:                           # avoid cold start for all functions
    enable: true                    # Enable for all functions
    name: 'warm-up-function'        # name of the generated function
    payload:                        # Warmup invocation payload
      isWarmup: true 
    concurrency: 5                  # How many instances to keep running  

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODO_ID_INDEX: TodoIdIndex
    IMAGES_S3_BUCKET: serverless-udagram-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKSURL: https://dev-19q0bhxm.auth0.com/.well-known/jwks.json
    AUTH_0_SECRET_URL_ID: Auth0SecretUrl-${self:provider.stage}
    AUTH_0_SECRET_URL_FIELD: auth0SecretUrl
  
  iamRolesStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resurce: !GetAtt KMSKey.Arn    


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos/{todoId}
          cors: true 
          request:   
            schema:   # Schema that will be used to validate incoming requests
              application/json: ${file(models\get-todo-model.json)}  
    iamRolesStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODO_ID_INDEX}
    

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/todos
          cors: true
          authorizer: Auth
          request:   
            schema:   # Schema that will be used to validate incoming requests
              application/json: ${file(models\create-todo-model.json)}   
    iamRolesStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:   
            schema:   # Schema that will be used to validate incoming requests
              application/json: ${file(models\update-todo-model.json)}  
    iamRolesStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}      

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:   
            schema:   # Schema that will be used to validate incoming requests
              application/json: ${file(models\delete-todo-model.json)}  
    iamRolesStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE} 




  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          request:   
            schema:   # Schema that will be used to validate incoming requests
              application/json: ${file(models\delete-todo-model.json)}  

resources:
  Resources:
    # TODO: Add any necessary AWS resources

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Typr,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GroupsDyanoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdat
            AttributeType: S            
        KeySchema: 
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdat
            KeyType: RANGE     
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_ID_INDEX}
            KeySchema:
              KeyType: HASH
            Projection:
              ProjectionType: ALL                     
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}        

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
          -
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT 
              - POST
              - DELETE 
              - HEAD 
            MaxAge: 3000    

    BucketPolicy:
      Type: AWS::S3::Bucket
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket 

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS Key to encrypt Auth0urlsecret
        KeyPolicy:
          Version: '2012-10-17'
          Id: Key-default-1
          Statement:
            - Sid: Allow administration of the Key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'        

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_URL_ID}
        Description: Auth0 secret url
        KmsKeyId: !Ref KMSKey    